# import Invite from "Invite.graphql"
# import Address from 'Address.graphql'
# import AthleteAccount from 'AthleteAccount.graphql'

type AthleteUnitLookup {
  appId: String!
  custId: String
}

enum AthleteLevel {
  COLLEGE
  PROFESSIONAL
}

type Address {
  streetAddress: String!
  apt: String
  city: String!
  state: String!
  zipCode: String!
}


type PodSettings {
  SAVINGS: Int!
  INVESTMENTS: Int!
  SPENDING: Int!
}

type ProcessorToken{
  plaidAccountId: String!
  processorToken: String
}

type AthleteSport {
  name: String!
  airTableId: String!
  isActive: Boolean
}

type AthleteTeam {
  name: String!
  airTableId: String!
  isActive: Boolean
}

type Athlete @model @auth(rules: [
  {allow: public, operations: [read, create]},
  { allow: private, operations: [read, create, update] },
  { allow: owner, provider: userPools, ownerField: "id" }
])#@auth(rules: [{ allow: owner, provider: userPools, ownerField: "id" } {allow: public, operations: [read, create, update]}])
{
  firstName: String
  lastName: String
  mobilePhone: String! @index(name: "byPhone", queryField: "athleteByPhone")
  athleteTag: String
  email: AWSEmail
  tag: String
  level: AthleteLevel
  sport: AthleteSport
  team: AthleteTeam
  address: Address
  dateOfBirth: String
  accounts: [AthleteAccount] @hasMany
  unitLookup: AthleteUnitLookup 
  podSettings: PodSettings
  plaidToken: String
  unitToken: String
  plaidProcessorToken: ProcessorToken
  wyreAccountId: String
  isActive: Boolean!
}

type AthleteAccount @model @auth(rules: [
   {allow: public, operations: [read, create]},
  { allow: private, operations: [read, create, update] },
  { allow: owner, provider: userPools, ownerField: "id" }
])#@auth(rules: [{ allow: owner, provider: userPools, ownerField: "id" } {allow: public, operations: [read, create, update]}])
{
  athlete: Athlete! @belongsTo
  unitAccountId: String!
  routingCode: String!
  accountNumber: String!
  podName: String!
}

type PhoneChallenge @model @auth(rules: [{ allow: public, operations: [read, create, update] }]) {
  code: String! @primaryKey(sortKeyFields: ["phoneNumber"])
  phoneNumber: String!
  verified: Boolean!
}



type EmailChallenge @model @auth(rules: [{ allow: public, operations: [read, create, update] }]){
  code: String! @primaryKey(sortKeyFields: ["email"])
  email: String!
  verified: Boolean!
}

enum Status {
  AVAILABLE
  CHALLENGE
  VERIFIED
  CLAIMED
}

type Invite @model @auth(rules: [{ allow: public, operations: [read, create, update] }]){
  code: String! @primaryKey(sortKeyFields: ["status"])
  status: Status!
}

type Mutation {
  initiatePhoneChallenge(phoneNumber: String!): PhoneChallenge @function(name: "PlayerVerifyService-${env}") 
  tryPhoneChallenge(phoneNumber: String!, code: String!): Boolean! @function(name: "PlayerVerifyService-${env}")
  generateInvite: Invite @function(name: "InviteService-${env}") 
  initiateEmailChallenge(email: String!): EmailChallenge @function(name: "PlayerVerifyService-${env}")
  tryEmailChallenge(email: String!, code: String!): Boolean! @function(name: "PlayerVerifyService-${env}")
 
  openAppAndAccount(ssn: String!, athleteId: ID!): [AthleteAccount] @function(name: "UnitService-${env}") 
  openAccount(athleteId: ID!, podName: String!): AthleteAccount @function(name: "UnitService-${env}")

  podSettings(athleteId: ID!, savings: Int!, investments: Int!, spending: Int!): AthleteAccount @function(name: "UnitService-${env}") 
  createPlaidLink(athleteId: ID!): PlaidToken @function(name: "PlaidService-${env}") 
  updatePlaidLink(athleteId: ID!, accessToken: String!): PlaidToken @function(name: "PlaidService-${env}")
  
  createAthleteUnitToken(athleteId: ID!, verificationToken: String!, verificationCode: String!): UnitAccount @function(name: "UnitService-${env}")
  athleteUnitTokenVerification(athleteId: ID!): UnitAccount @function(name: "UnitService-${env}") 

  createWyreAccount(athleteId: ID!): AthleteAccount @function(name: "WyreService-${env}") 
  #debitWryeAccount()
  #creditWyreAccount()
  #getAthleteWyreAccount()
  #getWryeTransactionById()
  #listAllWryeTransaction()
  
  createPlaidPayment(athleteId: ID!, plaidAccountId: String!, amount: Float!, description: String, idempotencyKey: String!): UnitAccount @function(name: "UnitService-${env}")
  bookPayment(athleteId: ID!, unitAccountId: String!, amount: Float!, description: String, receiverUnitAccountId: String!, receiverAccountType: String, idempotencyKey: String!): UnitAccount @function(name: "UnitService-${env}") 
  debitAccount(athleteId: ID!, amount: Float!, description: String, receiverName: String!, receiverRoutingNumber: String!, receiverAccountNumber: String!, receiverAccountType: String, addenda: String, idempotencyKey: String!): UnitAccount @function(name: "UnitService-${env}") 
  creditAccount(athleteId: ID!, amount: Float!, description: String, receiverName: String!, receiverRoutingNumber: String!, receiverAccountNumber: String!, receiverAccountType: String, addenda: String, idempotencyKey: String!): UnitAccount @function(name: "UnitService-${env}")
}


type Query{
    listPlaidAccounts(athleteId: ID!): [PlaidAccountDetail] @function(name: "PlaidService-${env}")
    listAthleteUnitAccounts(athleteId: ID!): [UnitAccount] @function(name: "UnitService-${env}") 
    getAthleteUnitAccountById(athleteId: ID!, unitAccountId: String!): UnitAccount @function(name: "UnitService-${env}") 
    #getAthleteByPhone(athleteId: String!): Athlete @function(name: "PlayerVerifyService-${env}")

    getUnitTransactionById(unitAccountId: String!, unitTransactionId: String!): UnitAccount @function(name: "UnitService-${env}") 
    listAllUnitTransactions(athleteId: ID!): [UnitAccount] @function(name: "UnitService-${env}") 
    listUnitBalanceHistory(athleteId: ID!): [UnitAccount] @function(name: "UnitService-${env}") 
    unitAccountStatement(athleteId: ID!): [UnitAccount] @function(name: "UnitService-${env}")
    getAthleteSchool: [AthleteTeam] @function(name: "AirtableService-${env}")
}

type RecentTransaction @model @auth(rules: [{ allow: public, operations: [read, create, update] }])
{
  transactionId: String! 
  athleteId: String!
  status: String!
  amount: Float
  idempotencyKey: String
  direction: String
  createdAt: String
  read: Boolean
  settled: String
  podAllocation: PodSettings
}

type PlaidToken {
  access_token: String
  item_id: String
  link_token: String
  request_id: String
  new_access_token: String
}

type PlaidAccountDetail{
    account_id: String
    balances: Balance
    mask: String
    name: String
    official_name: String
    subtype: String
    type: String
}

type Balance{
    available: Float
    current: String
    iso_currency_code: String
    limit: String
    unofficial_currency_code: String
}

type UnitAccount{
  type: String
  id: String
  attributes: Attributes
}

type Attributes{
   createdAt: String
   direction: String
   amount: Float
   balance: Float
   summary: String
   description: String
   counterparty: Counterparty   
   name: String
   status: String
   date: String
   routingNumber: String
   accountNumber: String
   currency: String
   verificationToken: String
   expiresIn: Int
   hold: Float
   available: Float   
   tags: Tags  
}

type Counterparty{
   name: String
   routingNumber: String
   accountNumber: String
   accountType: String
}

type Tags{
   podName: String
   athleteId: String
}

https://github.com/ThePlayersCompany/TPC_Banking_Service.git