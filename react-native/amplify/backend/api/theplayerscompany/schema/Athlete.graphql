# import Invite from "Invite.graphql"
# import Address from 'Address.graphql'
# import AthleteAccount from 'AthleteAccount.graphql'

type AthleteUnitLookup {
  appId: String!
  custId: String
}

enum AthleteLevel {
  COLLEGE
  PROFESSIONAL
}

type PodSettings {
  SAVINGS: Int!
  INVESTMENTS: Int!
  SPENDING: Int!
}

type ProcessorToken{
  plaidAccountId: String!
  processorToken: String
}

type AthleteSport {
  name: String!
  airTableId: String!
  isActive: Boolean
}

type AthleteTeam {
  name: String!
  airTableId: String!
  isActive: Boolean
}

type Athlete @model @auth(rules: [
  {allow: owner, provider: userPools, ownerField: "id"}
])#@auth(rules: [{ allow: owner, provider: userPools, ownerField: "id" } {allow: public, operations: [read, create, update]}])
{
  firstName: String 
  lastName: String 
  mobilePhone: String! @index(name: "byPhone", queryField: "athleteByPhone") 
  athleteTag: String 
  email: AWSEmail 
  tag: String 
  level: AthleteLevel 
  sport: AthleteSport 
  team: AthleteTeam 
  address: Address 
  dateOfBirth: String 
  accounts: [AthleteAccount] @hasMany 
  unitLookup: AthleteUnitLookup 
  podSettings: PodSettings 
  plaidToken: String 
  unitToken: String 
  unitPlaidProcessorToken: ProcessorToken
  wyrePlaidProcessorToken: ProcessorToken 
  wyreAccountId: String 
  isActive: Boolean! 
}

type AthleteAccount @model 
@auth(rules: [
   {allow: owner, provider: userPools, ownerField: "athleteId"}
])#@auth(rules: [{ allow: owner, provider: userPools, ownerField: "id" } {allow: public, operations: [read, create, update]}])
{
  athlete: Athlete! @belongsTo 
  unitAccountId: String! 
  routingCode: String! 
  accountNumber: String! 
  podName: String! 
}
